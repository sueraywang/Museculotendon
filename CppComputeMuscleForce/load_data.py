import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import struct

def load_binary_data(filename):
    """
    Load the binary data generated by the C++ program
    """
    with open(filename, 'rb') as f:
        # Read header
        header = f.read(7).decode('ascii')
        if header != "NPZDATA":
            raise ValueError(f"Invalid file format: expected 'NPZDATA', got '{header}'")
        
        # Read dimensions
        dim1 = struct.unpack('I', f.read(4))[0]
        dim2 = struct.unpack('I', f.read(4))[0]
        dim3 = struct.unpack('I', f.read(4))[0]
        
        # Create empty arrays
        total_elements = dim1 * dim2 * dim3
        L = np.zeros((dim1, dim2, dim3))
        A = np.zeros((dim1, dim2, dim3))
        P = np.zeros((dim1, dim2, dim3))
        F = np.zeros((dim1, dim2, dim3))
        
        # Read L array
        for i in range(dim1):
            for j in range(dim2):
                for k in range(dim3):
                    L[i, j, k] = struct.unpack('d', f.read(8))[0]
        
        # Read A array
        for i in range(dim1):
            for j in range(dim2):
                for k in range(dim3):
                    A[i, j, k] = struct.unpack('d', f.read(8))[0]
        
        # Read P array
        for i in range(dim1):
            for j in range(dim2):
                for k in range(dim3):
                    P[i, j, k] = struct.unpack('d', f.read(8))[0]
        
        # Read F array
        for i in range(dim1):
            for j in range(dim2):
                for k in range(dim3):
                    F[i, j, k] = struct.unpack('d', f.read(8))[0]
    
    return L, A, P, F

def main():
    try:
        # Load the binary data
        L, A, P, F = load_binary_data("lM_act_pen_force.bin")
        print(f"Loaded data with shape: {L.shape}")
        
        # Load the lMtilde values for plotting histogram
        lm_df = pd.read_csv("lMtilde_values.csv")
        lm_values = lm_df['value'].values
        
        # Plot histogram of lMtilde values
        plt.figure(figsize=(10, 6))
        plt.hist(lm_values, bins=10, edgecolor='k')
        plt.title('Histogram of Normalized Muscle Length (lMtilde)')
        plt.xlabel('lMtilde values')
        plt.ylabel('Frequency')
        plt.savefig("lmtilde_histogram.png")
        plt.close()
        
        # Plot force vs. muscle length for different activation levels
        plt.figure(figsize=(10, 6))
        unique_lm = np.unique(L[:, 0, 0])
        
        # Sort lm values (they might not be sorted from the normal distribution)
        unique_lm.sort()
        
        for j in range(A.shape[1]):
            # Get activation level
            act_level = A[0, j, 0]
            
            # Extract forces for each muscle length
            forces = []
            for lm in unique_lm:
                i = np.where(L[:, 0, 0] == lm)[0][0]
                forces.append(F[i, j, 0])
            
            plt.plot(unique_lm, forces, marker='o', label=f'Act = {act_level:.2f}')
        
        plt.title('Force vs. Muscle Length for Different Activations')
        plt.xlabel('Normalized Muscle Length (lMtilde)')
        plt.ylabel('Force')
        plt.grid(True)
        plt.legend()
        plt.savefig("force_vs_lm.png")
        plt.close()
        
        # Plot force vs. activation for different pennation angles at fixed length
        middle_lm_idx = L.shape[0] // 2
        fixed_lm = L[middle_lm_idx, 0, 0]
        
        plt.figure(figsize=(10, 6))
        
        activations = np.unique(A[0, :, 0])
        
        for k in range(P.shape[2]):
            # Get pennation angle
            penn_angle = P[0, 0, k]
            
            # Extract forces for each activation
            forces = []
            for act in activations:
                j = np.where(A[0, :, 0] == act)[0][0]
                forces.append(F[middle_lm_idx, j, k])
            
            plt.plot(activations, forces, marker='o', label=f'Penn = {penn_angle:.2f}Â°')
        
        plt.title(f'Force vs. Activation for Different Pennation Angles (lM = {fixed_lm:.2f})')
        plt.xlabel('Activation')
        plt.ylabel('Force')
        plt.grid(True)
        plt.legend()
        plt.savefig("force_vs_activation.png")
        plt.close()
        
        # Save as NumPy .npz file
        np.savez('../TrainingData/lM_act_pen_force.npz', L=L, A=A, P=P, F=F)
        print("Data saved as lM_act_pen_force.npz")
        
    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()